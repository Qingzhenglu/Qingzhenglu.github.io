<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2025/02/04/Spring/"/>
    <url>/2025/02/04/Spring/</url>
    
    <content type="html"><![CDATA[<h3 id="Spring依赖注入方式（5种）"><a href="#Spring依赖注入方式（5种）" class="headerlink" title="Spring依赖注入方式（5种）"></a>Spring依赖注入方式（5种）</h3><ul><li><p><strong>构造器注入</strong>：通过构造函数传递依赖项。Spring 推荐使用这种方式，因为它确保了对象在创建时就已经完全初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MyDependency myDependency;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Myservice</span><span class="hljs-params">(MyDependency myDependency)</span> &#123;<br>        <span class="hljs-built_in">this</span>.myDependency = myDependency;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><strong>Setter 注入</strong>：通过 setter 方法设置依赖项。这种方式的好处是在有变更的情况下，可以重新注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;<br>    <span class="hljs-keyword">private</span> MyDependency myDependency;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMyDependency</span><span class="hljs-params">(MyDependency myDependency)</span> &#123;<br>        <span class="hljs-built_in">this</span>.myDependency = myDependency;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><strong>字段注入</strong>：直接在字段上使用 <code>@Autowired</code> 注解。这种方式虽然常见，但官方不推荐，因为它隐藏了类的依赖关系，且无法注入静态字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MyDependency myDependency;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><strong>方法注入</strong>：通过方法参数注入依赖项，通常用于特定方法的依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performAction</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> MyDependency myDependency)</span> &#123;<br>        myDependency.doSomething();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><strong>接口回调注入</strong>：通过实现 Spring 定义的一些内建接口，例如 <code>BeanFactoryAware</code>，会进行 <code>BeanFactory</code> 的注入。这种方式不常用。</p></li></ul><hr><h3 id="Spring-Bean作用域"><a href="#Spring-Bean作用域" class="headerlink" title="Spring Bean作用域"></a>Spring Bean作用域</h3><ul><li><p><strong>singleton</strong>：默认作用域，整个 Spring 容器中只有一个实例。</p></li><li><p><strong>prototype</strong>：每次获取 Bean 时都会创建一个新的实例。</p></li><li><p><strong>request</strong>：每个 HTTP 请求都会创建一个新的 Bean 实例，仅在 Spring Web 应用中有效。</p></li><li><p><strong>session</strong>：每个 HTTP 会话中会创建一个 Bean 实例，仅在 Spring Web 应用中有效。</p></li><li><p><strong>application</strong>：整个 <code>ServletContext</code> 生命周期中只有一个 Bean 实例，仅在 Spring Web 应用中有效。</p></li><li><p><strong>websocket</strong>：每个 <code>WebSocket</code>会话中会创建一个 Bean 实例，仅在 Spring Web 应用中有效。</p></li></ul><hr><h3 id="Bean-和-Component-的区别"><a href="#Bean-和-Component-的区别" class="headerlink" title="@Bean 和 @Component 的区别"></a>@Bean 和 @Component 的区别</h3><p>@Bean 和 @Component 都是用于定义 Spring 容器中的 Bean 的注解，但它们的使用场景和方式有所不同：</p><h4 id="Bean："><a href="#Bean：" class="headerlink" title="@Bean："></a><strong>@Bean</strong>：</h4><ul><li><p><strong>使用位置</strong>：通常用于 Java 配置类的方法上。</p></li><li><p><strong>用途</strong>：用于显式声明一个 Bean 并将其添加到 Spring 容器中，适用于配置第三方库或复杂对象。</p></li><li><p><strong>扫描机制</strong>：不支持自动扫描，需要手动注册。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DriverManagerDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DriverManagerDataSource</span>();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;user&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="Component："><a href="#Component：" class="headerlink" title="@Component："></a><strong>@Component</strong>：</h4><ul><li><p><strong>使用位置</strong>：用于类级别，将该类标记为 Spring 容器中的一个组件。</p></li><li><p><strong>用途</strong>：用于自动扫描和注入，适用于自定义服务、DAO 层、控制器等类的自动注册。</p></li><li><p><strong>扫描机制</strong>：支持自动扫描，通过 <code>@ComponentScan</code> 自动发现。</p></li><li><p><strong>衍生注解</strong>：</p><ul><li><strong>@Service</strong>：用于标识服务层的类</li><li><strong>@Repository</strong>：用于标识数据访问层的类（DAO层）</li><li><strong>@Controller</strong>：用于标识控制器类，通常用于Spring MVC中处理HTTP请求</li></ul></li><li><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createUser</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Creating user: &quot;</span> + name);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><p>总结来说，@Bean 更灵活，适合复杂初始化和手动配置，而 @Component 自动化更强，适合类的简单注册和自动发现。</p><hr><h3 id="Qualifier-注解的作用"><a href="#Qualifier-注解的作用" class="headerlink" title="@Qualifier 注解的作用"></a>@Qualifier 注解的作用</h3><p>@Qualifier 注解在 Spring 中的主要作用是用于在依赖注入时消除歧义。当一个类型有多个实现时，@Qualifier 注解可以指定需要注入哪一个具体的 Bean。</p><p>例如，假设有多个 Service 实现类，可以通过 @Qualifier 指定名称选择对应的实现 Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Service service;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Client</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;serviceImpl1&quot;)</span> Service service)</span> &#123;<br>        <span class="hljs-built_in">this</span>.service = service;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;<br>        service.serve();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在这个例子中，@Qualifier(“serviceImpl1”) 指定了要注入的具体实现类 <code>serviceImpl1</code>。</p><p>此外，@Qualifier 可以与 @Primary 一起使用，覆盖 @Primary 的默认行为。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Primary</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serve</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Default Service&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Qualifier(&quot;specificService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpecificService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serve</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Specific Service&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Service service;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Client</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;specificService&quot;)</span> Service service)</span> &#123;<br>        <span class="hljs-built_in">this</span>.service = service;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;<br>        service.serve();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>即使 <code>DefaultService</code> 被标记为 @Primary，但由于 <code>@Qualifier(&quot;specificService&quot;)</code>，所以最终注入的仍然是 <code>SpecificService</code>。</p><hr><h3 id="Value-的作用"><a href="#Value-的作用" class="headerlink" title="@Value 的作用"></a>@Value 的作用</h3><p>在 Spring 框架中，<code>@Value</code> 注解用于将外部化的配置值注入到 Spring 管理的 Bean 中。通过 <code>@Value</code> 注解，可以将属性文件、环境变量、系统属性等外部资源中的值注入到 Spring Bean 的字段、方法参数或构造函数参数中。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ol><li><strong>配置文件注入</strong>：将属性文件中的值注入到 Bean 中。</li><li><strong>系统属性和环境变量</strong>：将系统属性或环境变量的值注入到 Bean 中。</li><li><strong>默认值设置</strong>：在属性不可用时，提供默认值。</li></ol><h4 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h4><p>Properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">app.name</span>=<span class="hljs-string">MyApp</span><br><span class="hljs-attr">app.version</span>=<span class="hljs-string">1.0.0</span><br><br></code></pre></td></tr></table></figure><p>@Value注解注入属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;app.name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String appName;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;app.version&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String appVersion;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAppName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> appName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAppVersion</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> appVersion;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h3 id="Spring-中的-ModelAttribute注解的作用"><a href="#Spring-中的-ModelAttribute注解的作用" class="headerlink" title="Spring 中的 @ModelAttribute注解的作用"></a>Spring 中的 @ModelAttribute注解的作用</h3><p>在 Spring 框架中，<code>@ModelAttribute</code> 注解有两个主要作用：</p><ol><li><p><strong>在控制器方法参数中使用</strong>：将请求参数绑定到方法参数上，并将其添加到模型中，以便在视图中使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;<br>    <span class="hljs-meta">@ModelAttribute</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAttributes</span><span class="hljs-params">(Model model)</span> &#123;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Welcome to the site!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/greeting&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">greeting</span><span class="hljs-params">(<span class="hljs-meta">@ModelAttribute(&quot;user&quot;)</span> User user)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;greeting&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>@ModelAttribute(&quot;user&quot;)</code> 将请求参数绑定到 <code>User</code> 对象，并将其添加到模型中，以便在视图中使用。</p></li><li><p><strong>在方法级别使用</strong>：预处理模型数据，在请求处理方法执行之前将数据添加到模型中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;<br>    <span class="hljs-meta">@ModelAttribute(&quot;user&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/profile&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">profile</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;profile&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>@ModelAttribute(&quot;user&quot;)</code> 方法将在每个请求处理方法执行之前被调用，并将返回的 <code>User</code> 对象添加到模型中。</p></li></ol><hr><h3 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h3><p>循环依赖（Circular Dependency）是指两个或多个模块、类、组件之间相互依赖，形成一个闭环。简而言之，模块A依赖于模块B，而模块B又依赖于模块A，这会导致依赖链的循环，无法确定加载或初始化的顺序。</p><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><p>Spring 通过三级缓存机制来解决循环依赖问题：</p><ol><li><strong>一级缓存</strong>：存储所有创建完毕的单例Bean（完整的Bean）。</li><li><strong>二级缓存</strong>：存储所有仅完成实例化，但未进行属性注入和初始化的Bean。</li><li><strong>三级缓存</strong>：存储能建立这个Bean的一个工厂，通过工厂能获取这个Bean，延迟化Bean的生成，工厂生成的Bean会塞入二级缓存。</li></ol><p>通过这种机制，Spring 可以在 Bean 初始化过程中提前暴露一个创建中的 Bean，从而解决循环依赖问题。</p><p>在Spring中，只有同时满足以下两点才能解决循环依赖的问题：</p><ol><li>以来的Bean必须都是单例</li><li>依赖注入的方式，必须<strong>不全是</strong>构造器注入，且<code>beanName</code>字母序在前的不能是构造器注入。</li></ol><blockquote><p>Spring容器 根据<code>BeanName</code>字母序来创建Bean。</p></blockquote><h4 id="Spring解决循环依赖全流程："><a href="#Spring解决循环依赖全流程：" class="headerlink" title="Spring解决循环依赖全流程："></a>Spring解决循环依赖全流程：</h4><ol><li>首先，获取Bean时会通过Bean Name先去一级缓存查找完整的Bean，如果找到直接返回，否则进行下一步；</li><li>看对应的Bean是否在创建中，如果不在直接返回找不到（null），如果在，则会去二级缓存查找Bean，如果找到就返回，否则进行第三步；</li><li>在三级缓存中根据Bean Name查找Bean对应的工厂，如果存在工厂则通过工厂创建Bean，并且放置到二级缓存中；</li><li>如果三个缓存都没有找到，则返回null。</li></ol><p>举例，A依赖B，B依赖A，构成循环依赖。</p><p>从上可知，如果查询发现Bean正在创建中，然后再调用<code>createBean</code>来创建Bean,而实际创建是调用方法<code>doCreateBean</code>。</p><p><code>doCreateBean</code>这个方法会执行三个步骤：</p><ol><li>实例化</li><li>属性注入</li><li>初始化</li></ol><p>在实例化Bean后，会往三级缓存中塞入一个工厂，通过调用这个工厂的<code>getObject</code>方法就可以得到这个Bean。</p><p>注意，Spring并不知道是否会有循环依赖发生，也不管，反正往三级缓存中塞入这个工厂。这就是提前暴露。</p><p>然后开始执行属性注入，A发现需要注入B，所以去<code>getBean(B)</code>，此时又走一遍上面的逻辑，到了B的属性注入，此时B调用<code>getBean(A)</code>，这是一级缓存找不到，但是发现A正在创建，于是在二级缓存里找，没找到，再去三级缓存里找，找到了。</p><p>通过再三级缓存里暴露的工厂得到A，然后将这个工厂从三级缓存里删除，并将A加入到二级缓存。</p><p>B属性注入成功后，调用<code>initialzeBean</code>进行初始化，最后返回，将B加入到一级缓存。</p><p>然后回到A的属性注入，从一级缓存里找到B注入，然后执行初始化，将A从二级缓存里删除，并加入到一级缓存里。</p><blockquote><p>重点：在对象实例化后，都会在三级缓存里加入一个工厂，提前暴露还未完整的Bean，破坏了循环依赖的条件。</p><p>二级缓存虽然可以解决缓存依赖的问题，但在涉及到动态代理AOP时，直接使用二级缓存不做任何处理会导致我们拿到的Bean时未代理的原始对象。如果二级缓存内放的都是代理对象，则违反了Bean的生命周期。（正常代理的对象的生成是在被代理对象初始化后调用生成的）</p></blockquote><hr><h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><p>Spring MVC 基于经典的MVC模式（Model-View-Controller），将Spring MVC将请求处理流程分为三层：模型层，视图层，控制层，它提供了一种松耦合的方式将用户请求，业务逻辑和视图渲染分离开。</p><p>核心：<code>DispatcherServlet</code>，即前端控制器。通过注解，配置等方式，将HTTP请求映射到控制器方法，然后由控制器处理请求逻辑并将数据返回给视图层进行渲染。</p><h4 id="工作流程："><a href="#工作流程：" class="headerlink" title="工作流程："></a>工作流程：</h4><ol><li>客户端发起HTTP请求</li><li>请求被发送到<code>DispatcherServlet</code>（前端控制器）</li><li><code>DispatcherServlet</code>根据<code>HandleMapping</code>（处理映射器）将 <code>url</code>请求映射到对应的<code>Controller</code>上</li><li>控制器接受请求并执行相应的业务逻辑，通过<code>@RequestMapping</code>和<code>@Controller</code>注解定义映射的请求方法</li><li>控制器将返回的数据封装到模型对象中去，然后返回对应的视图</li><li><code>DispatcherServlet</code>会调用视图解析器，来解析返回的视图信息</li><li>根据解析好的视图信息，将数据模型渲染到浏览器，并返回客户端</li></ol><hr>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot</title>
    <link href="/2025/01/25/SpringBoot/"/>
    <url>/2025/01/25/SpringBoot/</url>
    
    <content type="html"><![CDATA[<p>摘要</p><span id="more"></span><h2 id="Maven依赖引入"><a href="#Maven依赖引入" class="headerlink" title="Maven依赖引入"></a>Maven依赖引入</h2><h3 id="1-单项目"><a href="#1-单项目" class="headerlink" title="1.单项目"></a>1.单项目</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>groupId</strong>：组织或公司名称，通常是反向域名。例如，<code>org.springframework.boot</code></li><li><strong>artifactId</strong>：项目名称或模块名称。例如，<code>spring-boot-starter-web</code></li><li><strong>version</strong>：依赖项的版本号。例如，<code>2.5.4</code></li></ul><h3 id="2-多模块项目"><a href="#2-多模块项目" class="headerlink" title="2. 多模块项目"></a>2. 多模块项目</h3><p><code>&lt;dependencyManagement&gt;</code> 标签用于集中管理依赖版本。它允许你在父 POM 文件中定义依赖的版本，然后在子模块中引用这些依赖，而无需在每个子模块中重复指定版本。</p><h4 id="父POM文件："><a href="#父POM文件：" class="headerlink" title="父POM文件："></a>父POM文件：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>parent-project<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>module-a<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>module-b<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="子POM文件："><a href="#子POM文件：" class="headerlink" title="子POM文件："></a>子POM文件：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>parent-project<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>module-a<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p>在 <code>pom.xml</code> 文件中，可以添加 <code>&lt;properties&gt;</code> 标签来定义依赖的版本号：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>my-app<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring.boot.version</span>&gt;</span>2.5.4<span class="hljs-tag">&lt;/<span class="hljs-name">spring.boot.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mysql.connector.version</span>&gt;</span>8.0.26<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.connector.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mysql.connector.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用 <code>&lt;properties&gt;</code> 标签来集中管理依赖的版本号。这种方法可以使版本号在整个项目中保持一致，并且更容易维护。</p><blockquote><p>在子模块没有引入相应依赖的时候，父POM不会将依赖注入到项目中。（不用担心父POM中的error）</p></blockquote><h2 id="Knife4j配置"><a href="#Knife4j配置" class="headerlink" title="Knife4j配置"></a>Knife4j配置</h2><blockquote><p>knife4j官方文档：<a href="https://doc.xiaominfo.com/docs/quick-start">https://doc.xiaominfo.com/docs/quick-start</a></p></blockquote><h3 id="1-依赖引入"><a href="#1-依赖引入" class="headerlink" title="1. 依赖引入"></a>1. 依赖引入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--knife4j文档--&gt;</span><br><span class="hljs-comment">&lt;!--官方文档：https://doc.xiaominfo.com/docs/quick-start --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;knife4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-配置类"><a href="#2-配置类" class="headerlink" title="2. 配置类"></a>2. 配置类</h3><h4 id="2-1-在不使用-EnableSwagger2WebMvc-的情况下配置-Knife4j"><a href="#2-1-在不使用-EnableSwagger2WebMvc-的情况下配置-Knife4j" class="headerlink" title="2.1 在不使用 @EnableSwagger2WebMvc 的情况下配置 Knife4j"></a>2.1 在不使用 <code>@EnableSwagger2WebMvc</code> 的情况下配置 Knife4j</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Knife4jConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> OpenAPI <span class="hljs-title function_">customOpenAPI</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenAPI</span>()<br>                .info(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>()<br>                        .title(<span class="hljs-string">&quot;API 文档&quot;</span>)<br>                        .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                        .description(<span class="hljs-string">&quot;接口描述&quot;</span>)<br>                        .termsOfService(<span class="hljs-string">&quot;http://doc.xiaominfo.com&quot;</span>)<br>                        .license(<span class="hljs-keyword">new</span> <span class="hljs-title class_">License</span>()<br>                                .name(<span class="hljs-string">&quot;Apache 2.0&quot;</span>)<br>                                .url(<span class="hljs-string">&quot;http://doc.xiaominfo.com&quot;</span>)));<br>    &#125;<br>    <br>    <span class="hljs-comment">// 将接口分组</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> GroupedOpenApi <span class="hljs-title function_">systemAPI</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> GroupedOpenApi.builder()<br>            .group(<span class="hljs-string">&quot;系统信息管理&quot;</span>)<br>            .pathsToMatch(<br>                    <span class="hljs-string">&quot;/admin/system/**&quot;</span><br>            )<br>            .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-使用-EnableSwagger2WebMvc-的情况下配置-Knife4j"><a href="#2-2-使用-EnableSwagger2WebMvc-的情况下配置-Knife4j" class="headerlink" title="2.2 使用 @EnableSwagger2WebMvc 的情况下配置 Knife4j"></a>2.2 使用 <code>@EnableSwagger2WebMvc</code> 的情况下配置 Knife4j</h4><blockquote><p>To Do…</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2WebMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Knife4jConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean(value = &quot;defaultApi2&quot;)</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">defaultApi2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo())<br>                .groupName(<span class="hljs-string">&quot;2.X版本&quot;</span>)<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.github.xiaoymin.knife4j.controller&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;API 文档&quot;</span>)<br>                .description(<span class="hljs-string">&quot;# swagger-bootstrap-ui-demo RESTful APIs&quot;</span>)<br>                .termsOfServiceUrl(<span class="hljs-string">&quot;http://www.xx.com/&quot;</span>)<br>                .contact(<span class="hljs-string">&quot;xx@qq.com&quot;</span>)<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-创建控制器"><a href="#3-创建控制器" class="headerlink" title="3. 创建控制器"></a>3. 创建控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Tag(name = &quot;首页模块&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br><br>    <span class="hljs-meta">@Operation(summary = &quot;向客人问好&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/sayHi&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">sayHi</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;name&quot;)</span> String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;Hi: &quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-启动项目"><a href="#4-启动项目" class="headerlink" title="4. 启动项目"></a>4. 启动项目</h3><p>启动 Spring Boot 项目，并在浏览器中访问 <code>http://localhost:8080/doc.html</code> 查看生成的 API 文档。</p><h3 id="5-相关配置"><a href="#5-相关配置" class="headerlink" title="5. 相关配置"></a>5. 相关配置</h3><ul><li>SpringDoc OpenAPI 的一个配置选项，用于控制参数对象的展平方式。具体来说，这个配置项决定了在生成 OpenAPI 文档时，是否将参数对象展平为单个参数，而不是嵌套对象。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">springdoc:</span><br>    <span class="hljs-attr">default-flat-param-object:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h3 id="1-元素"><a href="#1-元素" class="headerlink" title="1. &lt;resultMap&gt;元素"></a>1. <code>&lt;resultMap&gt;</code>元素</h3><p><code>&lt;resultMap&gt;</code> 元素用于定义结果映射。它包含多个 <code>&lt;result&gt;</code>、<code>&lt;id&gt;</code> 和 <code>&lt;association&gt;</code> 等子元素，用于指定如何将查询结果映射到 Java 对象的属性上。</p><h3 id="2-示例代码"><a href="#2-示例代码" class="headerlink" title="2. 示例代码"></a>2. 示例代码</h3><p><code>User.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-comment">// Getters and Setters</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">  <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 定义 resultMap --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.example.model.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 使用 resultMap 的查询语句 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllUsers&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userResultMap&quot;</span>&gt;</span><br>        SELECT * FROM users<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>可以使用<code>&lt;resultMap id=&quot;?&quot; type=&quot;?&quot; autoMapping=&quot;true&quot;&gt;</code>会将<code>resultMapping</code>中的字段按照名称相同的方式映射到返回类型的对应属性上，在映射时会自动忽略大小写。</p><p>Mybatis的自动映射策略默认是开启的，而且默认是只对<strong>非嵌套</strong>的resultMap进行自动映射。</p></blockquote><ul><li><strong><code>&lt;resultMap&gt;</code></strong>：定义结果映射，<code>id</code> 是结果映射的唯一标识符，<code>type</code> 是映射的 Java 对象类型。</li><li><strong><code>&lt;id&gt;</code></strong>：指定主键属性的映射，<code>property</code> 是 Java 对象的属性名，<code>column</code> 是数据库表的列名。</li><li><strong><code>&lt;result&gt;</code></strong>：指定普通属性的映射，<code>property</code> 是 Java 对象的属性名，<code>column</code> 是数据库表的列名。</li><li><strong><code>&lt;select&gt;</code></strong>：使用 <code>&lt;resultMap&gt;</code> 的查询语句，<code>resultMap</code> 属性指定使用的结果映射。</li></ul><h3 id="3-复杂映射"><a href="#3-复杂映射" class="headerlink" title="3. 复杂映射"></a>3. 复杂映射</h3><p>如果查询结果包含嵌套对象，可以使用 <code>&lt;association&gt;</code> 和 <code>&lt;collection&gt;</code> 元素进行复杂映射。</p><p><code>Order.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> User user;<br>    <span class="hljs-keyword">private</span> String orderNumber;<br><br>    <span class="hljs-comment">// Getters and Setters</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>OrderMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.mapper.OrderMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 定义嵌套 resultMap --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orderResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.example.model.Order&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderNumber&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_number&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.example.model.User&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;com.example.mapper.UserMapper.userResultMap&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 使用嵌套 resultMap 的查询语句 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllOrders&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;orderResultMap&quot;</span>&gt;</span><br>        SELECT o.id, o.order_number, u.id AS user_id, u.name, u.email<br>        FROM orders o<br>        JOIN users u ON o.user_id = u.id<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong><code>&lt;association&gt;</code></strong>：用于映射嵌套对象，<code>property</code> 是 Java 对象的属性名，<code>javaType</code> 是嵌套对象的类型，<code>resultMap</code> 是嵌套对象的结果映射。</li><li><strong><code>&lt;collection&gt;</code></strong>： MyBatis 中用于定义一对多关系映射的元素，它允许将查询结果中的多个记录映射到一个 Java 对象的集合属性上。例如Java中List类型的对象。</li></ul><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li><p><strong>xml文件的<code>&lt;</code>和<code>&gt;</code>的转义</strong></p><table><thead><tr><th>原符号</th><th>转义符号</th></tr></thead><tbody><tr><td><code>&lt;</code></td><td><code>&amp;lt;</code></td></tr><tr><td><code>&gt;</code></td><td><code>&amp;gt;</code></td></tr></tbody></table></li><li><p><strong>Mybatis-Plus分页插件注意事项</strong></p><p>使用Mybatis-Plus的分页插件进行分页查询时，如果结果需要使用<code>&lt;collection&gt;</code>进行映射，只能使用 <strong><a href="https://mybatis.org/mybatis-3/sqlmap-xml.html#nested-select-for-collection">嵌套查询（Nested Select for Collection)</a></strong>，而不能使用 <strong><a href="https://mybatis.org/mybatis-3/sqlmap-xml.html#nested-results-for-collection">嵌套结果映射（Nested Results for Collection）</a></strong>。</p><p><strong>嵌套查询</strong>和<strong>嵌套结果映射</strong>是Collection映射的两种方式，下面通过一个案例进行介绍</p><p>例如有<code>room_info</code>和<code>graph_info</code>两张表，其关系为一对多，如下</p><img src="/imgs/article/SpringBoot/insert/mybatis-一对多.drawio.svg" style="zoom:50%;" /><p>现需要查询房间列表及其图片信息，期望返回的结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;number&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">201</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;rent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2000</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;graphList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;roomId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;roomId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;number&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">202</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;rent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3000</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;graphList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;roomId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;roomId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>为得到上述结果，可使用以下两种方式</p><ul><li><p><strong>嵌套结果映射</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectRoomPage&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;RoomPageMap&quot;</span>&gt;</span><br>    select ri.id room_id,<br>           ri.number,<br>           ri.rent,<br>       gi.id graph_id,<br>           gi.url,<br>           gi.room_id<br>    from room_info ri<br>   left join graph_info gi on ri.id=gi.room_id<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;RoomPageMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;RoomInfoVo&quot;</span> <span class="hljs-attr">autoMapping</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;room_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;graphInfoList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;GraphInfo&quot;</span> <span class="hljs-attr">autoMapping</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;graph_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这种方式的执行原理如下图所示</p><img src="/imgs/article/SpringBoot/insert/mybatis-嵌套结果映射.drawio.svg" style="zoom:50%;" /></li><li><p><strong>嵌套查询</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectRoomPage&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;RoomPageMap&quot;</span>&gt;</span><br>    select id,<br>           number,<br>           rent<br>    from room_info<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;RoomPageMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;RoomInfoVo&quot;</span> <span class="hljs-attr">autoMapping</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;graphInfoList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;GraphInfo&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;selectGraphByRoomId&quot;</span>  <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectGraphByRoomId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;GraphInfo&quot;</span>&gt;</span><br>    select id,<br>           url,<br>       room_id<br>    from graph_info<br>    where room_id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这种方法使用两个独立的查询语句来获取一对多关系的数据。首先，Mybatis会执行主查询来获取<code>room_info</code>列表，然后对于每个<code>room_info</code>，Mybatis都会执行一次子查询来获取其对应的<code>graph_info</code>。</p><img src="/imgs/article/SpringBoot/insert/mybatis-嵌套查询.drawio.svg" style="zoom:50%;" /></li></ul><p>若现在使用MybatisPlus的分页插件进行分页查询，假如查询的内容是第<strong>1</strong>页，每页<strong>2</strong>条记录，则上述两种方式的查询结果分别是</p><ul><li><p><strong>嵌套结果映射</strong></p><img src="/imgs/article/SpringBoot/insert/mybatis-分页查询-嵌套结果映射.drawio.svg" style="zoom:50%;" /></li><li><p><strong>嵌套查询</strong></p><img src="/imgs/article/SpringBoot/insert/mybatis-分页查询-嵌套查询.drawio.svg" style="zoom:50%;" /></li></ul><p>显然<strong>嵌套结果映射</strong>的分页逻辑是存在问题的。</p><h2 id="Redis缓存优化"><a href="#Redis缓存优化" class="headerlink" title="Redis缓存优化"></a>Redis缓存优化</h2></li></ul><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>缓存优化是一个性价比很高的优化手段，多数情况下，缓存优化可以通过一些简单的操作，换来性能的大幅提升。缓存优化的核心思想就是将一些原本保存在磁盘（例如MySQL）中的、经常访问并且查询开销比较大的数据，临时保存到内存（例如Redis）中。后序再访问相同数据时，就可直接从内存中获取结果，而无需再访问磁盘，由于内存的读写速度远高于磁盘，因此就能极大的提高程序的性能。</p><img src="/imgs/article/SpringBoot/insert/缓存概述.drawio.svg" style="zoom:50%;" /><p>在使用缓存优化时，有一个问题不得不提，那就是<strong>数据库和缓存数据的一致性</strong>，当数据库中的数据发生变化时，缓存中的数据也要同步更新，否则就会出现数据不一致的问题，解决该问题的方案有如下几个</p><ul><li>数据发生变化时，更新数据库的同时也更新缓存</li><li>数据发生变化时，更新数据库的同时删除缓存</li></ul><p>进行缓存优化时，查询涉及多表访问，需要多次访问数据库的接口，查询代价较高，可以采取缓存优化，加快查询速度。</p><h3 id="2-自定义RedisTemplate"><a href="#2-自定义RedisTemplate" class="headerlink" title="2. 自定义RedisTemplate"></a>2. 自定义<code>RedisTemplate</code></h3><p>本项目使用Reids保存缓存数据，因此我们需要使用RedisTemplate进行读写操作。前文提到过，<code>Spring-data-redis</code>提供了<code>StringRedisTemplate</code>和<code>RedisTemplate&lt;Object,Object&gt;</code>两个实例，但是两个实例均不满足我们当前的需求，所以我们需要自定义RedisTemplate。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">stringObjectRedisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        template.setConnectionFactory(redisConnectionFactory);<br>        template.setKeySerializer(RedisSerializer.string());<br>        template.setValueSerializer(RedisSerializer.java());<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-压力测试"><a href="#3-压力测试" class="headerlink" title="3. 压力测试"></a>3. 压力测试</h3><p>使用Postman或者Apifox等工具对接口进行压力测试。</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2025/01/24/MYSQL/"/>
    <url>/2025/01/24/MYSQL/</url>
    
    <content type="html"><![CDATA[<p>mysql学习笔记</p><span id="more"></span><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h3 id="MySQL的执行顺序"><a href="#MySQL的执行顺序" class="headerlink" title="MySQL的执行顺序"></a><code>MySQL</code>的执行顺序</h3><p><code>from</code> &gt; <code>join</code> &gt; <code>where</code> &gt; <code>group by</code> &gt; 聚合函数 &gt; <code>having</code> &gt; <code>select</code> &gt; <code>order by</code> &gt; <code>limit</code></p><div class="note note-info">            <p>格式化函数(格式化数字：FROMAT(),格式化日期：DATE_FORMAT())会在<code>group by</code>之前执行</p>          </div><h3 id="count的条件用法"><a href="#count的条件用法" class="headerlink" title="count的条件用法"></a><code>count</code>的条件用法</h3><p><code>count</code> 函数用于计算非 <code>null</code> 值的数量。</p><p><code>count(age &gt; 20 or null)</code>里面的<code>or null</code>必须加，否则就等于<code>count(*)</code></p><p><code>count</code>对于不管是0还是1，都会计数一次，只有<code>null</code>不会被计数。</p><ul><li><code>age &gt; 20</code>：这是一个布尔表达式，当 <code>age</code> 大于 20 时返回 <code>TRUE</code>，否则返回 <code>FALSE</code>。</li><li><code>or null</code>：当布尔表达式 <code>age &gt; 20</code> 为 <code>FALSE</code> 时，将其转换为 <code>null</code>，从而使得这些记录不会被 <code>count</code> 计数。</li></ul><p>或者可以写为<code>sum(age &gt; 20)</code></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>MYSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微服务</title>
    <link href="/2025/01/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <url>/2025/01/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>微服务学习笔记</p><span id="more"></span><h2 id="Nacos-注册-配置中心"><a href="#Nacos-注册-配置中心" class="headerlink" title="Nacos-注册&#x2F;配置中心"></a>Nacos-注册&#x2F;配置中心</h2><ol><li><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>官网：<a href="https://nacos.io/zh-cn/docs/v2/quickstart/quick-start.html">https://nacos.io/zh-cn/docs/v2/quickstart/quick-start.html</a></p><p>一个更易于构建云原生应用的动态服务发现，配置管理和服务管理的平台。</p></li><li><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>Docker 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 拉取镜像<br>docker pull nacos/nacos-server:v2.4.3<br>// 创建容器<br>docker run -d -p 8848:8848 -p 9848:9848 -e MODE=standalone --name nacos nacos/nacos-server:v2.4.3<br><br></code></pre></td></tr></table></figure></li></ul></li><li><h3 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h3><ul><li><p>依赖引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>在<code>application.yml</code>或<code>application.properties</code>中进行配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#暂未用到配置中心功能，需要关闭配置检查</span><br><span class="hljs-comment">#spring.cloud.nacos.config.import-check.enabled=false</span><br></code></pre></td></tr></table></figure></li><li><p>开启服务注册&#x2F;发现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">//核心注解</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplication</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(MyApplication.class, args);<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行项目，访问：<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a> 可以看到服务已经注册。</p></li></ul></li><li><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><ul><li><p><code>DiscoveryClient</code>是 Spring Cloud 提供的一个接口，用于服务发现功能。它可以与服务注册中心（如 Eureka、Nacos、Consul 等）进行交互，获取已注册的服务信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>DiscoveryClient discoveryClient;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">discoveryClientTest</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 从注册中心获取服务列表</span><br>    <span class="hljs-keyword">for</span> (String service : discoveryClient.getServices()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;service = &quot;</span> + service);<br>        <span class="hljs-comment">//获取ip+port</span><br>        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(service);<br>        <span class="hljs-keyword">for</span> (ServiceInstance instance : instances) &#123;<br>            System.out.println(<span class="hljs-string">&quot;ip：&quot;</span>+instance.getHost()+<span class="hljs-string">&quot;；&quot;</span>+<span class="hljs-string">&quot;port = &quot;</span> + instance.getPort());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><code>NacosServiceDiscovery</code> 是 Spring Cloud Alibaba 提供的用于与 Nacos 进行服务发现交互的实现类。它实现了 Spring Cloud 的 <code>DiscoveryClient</code> 接口，使得应用程序可以从 Nacos 服务注册中心获取服务实例信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>NacosServiceDiscovery nacosServiceDiscovery;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span>  <span class="hljs-title function_">nacosServiceDiscoveryTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NacosException &#123;<br>    <span class="hljs-keyword">for</span> (String service : nacosServiceDiscovery.getServices()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;service = &quot;</span> + service);<br>        List&lt;ServiceInstance&gt; instances = nacosServiceDiscovery.getInstances(service);<br>        <span class="hljs-keyword">for</span> (ServiceInstance instance : instances) &#123;<br>            System.out.println(<span class="hljs-string">&quot;ip：&quot;</span>+instance.getHost()+<span class="hljs-string">&quot;；&quot;</span>+<span class="hljs-string">&quot;port = &quot;</span> + instance.getPort());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li><li><h3 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h3><ul><li><p><code>RestTemplate</code>，编程式REST客户端</p><ol><li><p>配置<code>RestTemplate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Configuration</span> &#123;<br><br>   <br>    <span class="hljs-meta">@Bean</span><br>    RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-meta">@Autowired</span><br>   RestTemplate restTemplate;<br>        <br>        <br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testRestTemplate</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">forObject</span> <span class="hljs-operator">=</span> restTemplate.getForObject(<span class="hljs-string">&quot;url&quot;</span>, String.class);<br>System.out.println(forObject);<br>System.out.println(<span class="hljs-string">&quot;-----------------------------&quot;</span>);<br>        <br>&#125;<br>        <br></code></pre></td></tr></table></figure></li></ol><blockquote><p>使用RestTemplate，必须精确指定地址和端口</p></blockquote></li></ul></li><li><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ol><li><p>依赖导入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>直接调用实现负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> LoadBalancerClient loadBalancerClient;<br><br><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getObjectFromRemoteWithLoadBalance</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">//根据注册的微服务名称选择服务实例（负载均衡默认算法:轮询）</span><br>    <span class="hljs-type">ServiceInstance</span> <span class="hljs-variable">choose</span> <span class="hljs-operator">=</span> loadBalancerClient.choose(<span class="hljs-string">&quot;service-name&quot;</span>);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://&quot;</span> + choose.getHost() + <span class="hljs-string">&quot;:&quot;</span> + choose.getPort() + <span class="hljs-string">&quot;/请求路径/&quot;</span> + id;<br><br>    <span class="hljs-keyword">return</span> restTemplate.getForObject(url, Object.class);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注解实现负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@LoadBalanced</span> <span class="hljs-comment">//基于注解的负载均衡</span><br><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getObjectFromRemoteWithLoadBalanceAnnoation</span><span class="hljs-params">(Long id)</span> &#123;<br><br>    <span class="hljs-comment">//service-name 会被动态替换</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://service-name/getInfo(请求路径)/&quot;</span> + id;<br><br>    <span class="hljs-keyword">return</span> restTemplate.getForObject(url, Object.class);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实现负载均衡只需要传入<code>服务名称</code>，请求发起前会去注册中心确定微服务地址。</p></blockquote></li></ol></li><li><h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><ul><li><p><code>ConfigurationProperties</code>，自动绑定配置，动态更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;order&quot;)</span> <span class="hljs-comment">//配置批量绑定在nacos下，可以无需@RefreshScope就能实现自动刷新</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderProperties</span> &#123;<br><br>    String timeout;<br><br>    String autoConfirm;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">order.timeout</span>=<span class="hljs-string">10min</span><br><span class="hljs-attr">order.auto-confirm</span>=<span class="hljs-string">7d</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="OpenFeign-远程调用"><a href="#OpenFeign-远程调用" class="headerlink" title="OpenFeign-远程调用"></a>OpenFeign-远程调用</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@EnableFeignClients</span><br></code></pre></td></tr></table></figure><h2 id="Zuul网关"><a href="#Zuul网关" class="headerlink" title="Zuul网关"></a>Zuul网关</h2><ol><li>swagger 依赖写在接口pom.xml,注解统一写在接口处</li><li>swagger一般只在测试环境搭建,可以在描述中协商不同环境的接口地址</li></ol>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>SpringCloud</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
